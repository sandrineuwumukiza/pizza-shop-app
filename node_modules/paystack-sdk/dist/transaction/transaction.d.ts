import { Axios } from 'axios';
import { CheckAuthorizationResponse, ExportTransaction, ListTransactions, PartialDebitResponse, Timeline, GetTransactionResponse } from './interface';
import { ChargeAuthorization, CheckAuthorization, InitializeTransaction, ListTransactionQueryParams, PartialDebit, TransactionInitialized } from './interface';
interface BadRequest {
    status: boolean;
    message: string;
    data: null;
}
/**
 * # Tansactions
 * The transaction API allows you create and manage
 * payments on your integration
 */
export declare class Transaction {
    private http;
    constructor(http: Axios);
    /**
     * Initialize a transaction
     * @param {InitializeTransaction} data **Body Param**
     */
    initialize(data: InitializeTransaction): Promise<TransactionInitialized | BadRequest>;
    verify(reference: string): Promise<GetTransactionResponse | BadRequest>;
    list(queryParams?: ListTransactionQueryParams): Promise<ListTransactions | BadRequest>;
    fetch(id: string): Promise<GetTransactionResponse | BadRequest>;
    chargeAuthorization(data: ChargeAuthorization): Promise<GetTransactionResponse | BadRequest>;
    checkAuthorization(data: CheckAuthorization): Promise<CheckAuthorizationResponse | BadRequest>;
    viewTimeline(id: string): Promise<Timeline | BadRequest>;
    total(queryParams: ListTransactionQueryParams): Promise<ListTransactions | BadRequest>;
    export(queryParams: ListTransactionQueryParams): Promise<ExportTransaction | BadRequest>;
    partialDebit(data: PartialDebit): Promise<PartialDebitResponse | BadRequest>;
}
export {};
