"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transfer = void 0;
const control_1 = require("./control");
class Transfer {
    constructor(http) {
        this.http = http;
        this.control = new control_1.Control(http);
    }
    /**
     * # Initiate Transfer
     * Status of transfer object returned will be `pending` if OTP is disabled.
     * In the event that an OTP is required, status will read `otp`.
     */
    initiate(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.post('/transfer', JSON.stringify(data));
        });
    }
    /**
     * # Finalize Transfer
     * Finalize an initiated transfer
     */
    finalize(transferCode, otp) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.post('/transfer/finalize_transfer', JSON.stringify({ transfer_code: transferCode, otp }));
        });
    }
    bulk(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.post('/transfer/bulk', JSON.stringify(data));
        });
    }
    list(queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('/transfer', {
                params: Object.assign({}, queryParams),
            });
        });
    }
    fetch(idOrCode) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get(`/transfer/${idOrCode}`);
        });
    }
    verify(reference) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get(`transfer/verify/${reference}`);
        });
    }
}
exports.Transfer = Transfer;
